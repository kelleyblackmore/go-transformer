name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.21.x', '1.22.x' ]
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -timeout=5m ./...

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        go-version: [ '1.21.x', '1.22.x' ]
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Build CLI tool
      run: go build -o gotransformer ./cmd

    - name: Test CLI tool help
      run: ./gotransformer --help

    - name: Test CLI tool commands
      run: |
        ./gotransformer classify --help
        ./gotransformer generate --help

    - name: Upload CLI binary
      uses: actions/upload-artifact@v3
      with:
        name: gotransformer-${{ matrix.go-version }}
        path: gotransformer

  install-test:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        go-version: [ '1.21.x', '1.22.x' ]
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Download dependencies
      run: go mod download

    - name: Test go install
      run: go install ./cmd

    - name: Test installed binary
      run: |
        export PATH=$PATH:$(go env GOPATH)/bin
        which cmd
        cmd --help

  examples:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        go-version: [ '1.21.x', '1.22.x' ]
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Download dependencies
      run: go mod download

    - name: Build examples
      run: |
        cd examples
        go build -o text_gen ./text_gen.go

    - name: Test example compilation
      run: |
        cd examples
        echo "Testing text generation example compilation..."
        echo "Example binary built successfully - it requires API token for actual execution"

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.x'

    - name: Download dependencies
      run: go mod download

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.x'

    - name: Download dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        export PATH=$PATH:$(go env GOPATH)/bin
        gosec ./... || echo "Gosec scan completed with warnings"

  dependency-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21.x'

    - name: Download dependencies
      run: go mod download

    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... || echo "Vulnerabilities found in dependencies or stdlib - review required"